plugins {
	id "fabric-loom"
	id "info.u_team.gradle_files"
	id "me.modmuss50.mod-publish-plugin"
	id "maven-publish"
}

gradlefiles.loaderSuffix = "fabric"

group = rootProject.group
base.archivesName = gradlefiles.archivesName()
version = gradlefiles.version()

sourceSets {
	main {
		java {
			srcDirs += "src/integration/java"
			srcDirs += gradlefiles.project("common").sourceSets.common.java.srcDirs
		}
		resources {
			srcDirs += "src/integration/resources"
			srcDirs += gradlefiles.project("common").sourceSets.common.resources.srcDirs
		}
	}
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(17)
	}
	withSourcesJar()
	withJavadocJar()
}

loom {
	runs {
		client {
			runDir "run/client"
			vmArgs "-Dmixin.debug.verbose=true"
			vmArgs "-Dmixin.debug.export=true"
			ideConfigGenerated true
		}
		
		server {
			runDir "run/server"
			vmArgs "-Dmixin.debug.verbose=true"
			vmArgs "-Dmixin.debug.export=true"
			ideConfigGenerated true
		}
	}
	
	mixin {
		defaultRefmapName = "usefulbackpacks.mixins.refmap.json"
	}
}

tasks.withType(Jar).configureEach { task ->
	gradlefiles.defaultJar(task)
}

tasks.withType(Javadoc).configureEach { task ->
	task.options.addStringOption("Xdoclint:none", "-quiet")
}

signjar.sign(tasks.named("remapJar"))

processResources {
	doLast {
		fileTree(dir: outputs.files.asPath, include: "**/*.json").each { File file ->
			file.text = groovy.json.JsonOutput.toJson(new groovy.json.JsonSlurper().parse(file))
		}
	}
}

repositories {
	maven {
		url = "https://maven.parchmentmc.org"
	}
	maven {
		url = "https://maven.blamejared.com"
	}
	maven {
		url = "https://maven.terraformersmc.com"
	}
	maven {
		url = "https://maven.ladysnake.org/releases"
	}
}

dependencies {
	minecraft gradlefiles.fabricMinecraftDependency()
	mappings loom.layered() {
		officialMojangMappings()
		parchment(config.fabric.mapping_layer)
	}
	
	modImplementation gradlefiles.fabricLoaderDependency()
	modRuntimeOnly gradlefiles.fabricApiDependency()
	
	modImplementation "info.u-team:u_team_core-fabric-1.20.1:5.1.4.312"
	
	modCompileOnly "mezz.jei:jei-${config.minecraft.version}-fabric-api:${config.jei.version}"
	modCompileOnly "mezz.jei:jei-${config.minecraft.version}-common-api:${config.jei.version}"
	modRuntimeOnly "mezz.jei:jei-${config.minecraft.version}-fabric:${config.jei.version}"
	
	modImplementation "dev.emi:trinkets:${config.trinkets.version}"
	
	modRuntimeOnly "com.terraformersmc:modmenu:${config.modmenu.fabric.version}"
}

publishMods {
	file = tasks.named("remapJar").flatMap { jar -> jar.archiveFile }
	displayName = "${config.publish.display}-Fabric-${config.minecraft.version}-${project.version}"
	changelog = "[Changelog for version ${project.version}](${gradlefiles.changelogUrl()})"
	type = me.modmuss50.mpp.ReleaseType.of(config.publish.type)
	modLoaders.add("fabric")
	
	curseforge {
		accessToken = defaultPropertyValue("curseforge.token")
		
		projectId = config.curse.id
		projectSlug = config.curse.slug
		minecraftVersions.add(config.minecraft.version)
		javaVersions.add(JavaVersion.VERSION_17)
		
		requires("u-team-core")
	}
	
	modrinth {
		accessToken = defaultPropertyValue("modrinth.token")
		
		projectId = config.modrinth.id
		minecraftVersions.add(config.minecraft.version)
		
		requires("u-team-core")
	}
	
	discord {
		webhookUrl = defaultPropertyValue("discord.update_webhook")
		
		username = "Mod Update"
		avatarUrl = "https://raw.githubusercontent.com/MC-U-Team/${config.github.name}/${config.github.branch}/logo.png"
		
		content = changelog.map { log -> "# ${config.minecraft.version}: ${config.publish.display} (Fabric)\n" + log}
	}
}

publishing {
	repositories {
		maven {
			url "https://repo.u-team.info"
			credentials {
				username = "maven"
				password = defaultPropertyValue("maven.password")
			}
		}
	}
	publications {
		mavenJava(MavenPublication) {
			artifactId project.base.archivesName.get()
			
			from gradlefiles.filteredJavaComponent {
				filterDependency { holder ->
					"modmenu" == holder.dependency.name
				}
				filterDependency { holder ->
					"trinkets" == holder.dependency.name
				}
				filterDependency { holder ->
					"mezz.jei" == holder.dependency.group
				}
			}
			
			pom {
				pom.name = project.base.archivesName.get()
				rootProject.commonPom(it)
			}
		}
	}
}